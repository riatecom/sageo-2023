---
title: "Articulation de différents langages (R, JavaScript et Python) pour la géovisualisation avec Quarto"
subtitle: "Atelier Sageo, Québec, Juin 2023"
author: "Timothée Giraud, Nicolas Lambert, Matthieu Viry, Ronan Ysebaert (UAR RIATE, CNRS, Université Paris Cité)"
format:
  html:
    theme: sandstone
    fontsize: 0.9em
    code-tools: true
    toc: true
    toc-depth: 2
    linkcolor: "#8631ad"
execute: 
  cache: false
editor_options: 
  chunk_output_type: console
---


# R

## L'écosystème spatial de R


1. Qu'est-ce que R. 

2. R et le spatial

3. Zoom sf

4. Zoom carto thématique

5. Ressources


R permet depuis longtemps de traiter et représenter les données spatiales. 
Historiquement, 4 packages permettent d’importer, de manipuler et de transformer les données spatiales : sp, rgeos, rgdal et raster.   

Aujourd’hui, les principaux développements concernant les données vectorielles se sont détachés des 3 anciens (sp, rgdal, rgeos) pour se reposer principalement sur le package sf ((Pebesma, 2018a), (Pebesma, 2018b)).  
Les packages stars (Pebesma, 2021) et terra(Hijmans, 2021b) sont venus quand à eux remplacer le package raster pour le traitement des données raster. 

Les développements actuels s'appuient sur ce socle et forment un écosystème robuste qui offre aux utilisateurs la plupart des fonctionnalités autrefois réservées aux Systèmes d'Information Géographique.




### Cartographie thématique
- 2014 : `tmap` (Martijn Tennekes)
- 2017 : `ggplot2` + `ggspatial` (Dewey Dunnington)
- 2021 : `mapsf` (T. Giraud) remplace `cartography`


### Cartographie interactive
- 2015 : `leaflet` (Joe Cheng et al.), repose sur la librairie javascript `leaflet`.
- 2015 : `mapview` (Tim Appelhans et al.), repose sur le package `leaflet`.
- 2018 : `mapdeck` (David Cooley), repose sur les librairies `Mapbox GL` et `Deck.gl`

### Statistiques spatiales
- `spatstat` : Analyse statistique de semis de points
- `gstat` : Variogram et Krigeage
- `rgeoda` : Geoda avec R
- `GWmodel`, `spgwr` : Geographically Weighted Models
- ...




## Le package`sf` 

<img src="fig/logo_sf.gif" align="right" width="150"/> 

Une interface entre R et plusieurs librairies géographiques largement utilisées en géomatique: 

* [GDAL](http://www.gdal.org/) - Geospatial Data Abstraction Library

* [PROJ](https://proj.org/) - Coordinate Transformation Software

* [GEOS](http://trac.osgeo.org/geos/) - Geometry Engine - Open Source     


![[Pebesma, 2019](https://github.com/edzer/UseR2019)](fig/sf_deps.png)

![Format des objets spatiaux `sf`](fig/sf.png)





## Le package `terra` 

<img src="fig/logo_terra.png" align="right" width="150px"/> 

Le package `terra` permet de gérer des données vectorielles et surtout **raster**. 

- Affichage
- Modifications de la zone d’étude (projection, crop, mask, agrégation, fusion...)
- Algèbre spatial (opérations locales, focales, globales, zonales)
- Transformation et conversion (rasterisation, vectorisation)


## Le package `mapsf` 

<img src="fig/logo_mapsf.png" align="right" width="150px"/> 

### Utilisation simple 

```{r mapsf_simple}
#| fig-width: 5
#| fig.height: 6
library(mapsf)
# Import the sample dataset
mtq <- mf_get_mtq()
# Plot the base map
mf_map(x = mtq)
# Plot proportional symbols
mf_map(x = mtq, var = "POP", type = "prop")
# Plot a map layout
mf_layout(title = "Population in Martinique", 
          credits = "T. Giraud; Sources: INSEE & IGN, 2018")
```


### Utilisation avancée

```{r}
#| results: hide
# Export a map with a theme and extra margins 
mf_export(x = mtq, filename = "fig/mtq.svg",  width = 5, 
          theme = "green", expandBB = c(0,0,0,.3)) 
# Plot a shadow
mf_shadow(mtq, col = "grey10", add = TRUE)
# Plot a choropleth map
mf_map(x = mtq, var = "MED", type = "choro",
       pal = "Dark Mint", 
       breaks = "quantile", 
       nbreaks = 6, 
       leg_title = "Median Income\n(euros)", 
       leg_val_rnd = -2, 
       add = TRUE)
# Start an inset map
mf_inset_on(x = "worldmap", pos = "right")
# Plot mtq position on a worldmap
mf_worldmap(mtq, col = "#0E3F5C")
# Close the inset
mf_inset_off()
# Plot a title
mf_title("Wealth in Martinique, 2015")
# Plot credits
mf_credits("T. Giraud\nSources: INSEE & IGN, 2018")
# Plot a scale bar
mf_scale(size = 5)
# Plot a north arrow
mf_arrow('topleft')
dev.off()
```

![](fig/mtq.svg){width="500px"}


## Le package `mapview` 

<img src="fig/logo_mapview.gif" align="right" width="150px"/> 

### Utilisation simple

```{r mapview}
#| code-line-numbers: "6"
#| fig-width: 6
#| fig.height: 4
#| cache: false
library(mapview)
mapview(mtq) 
```




## Ressources

- [La Spatial Task View](https://cran.r-project.org/web/views/Spatial.html)
- [R-SIG-Geo mailing list](https://stat.ethz.ch/mailman/listinfo/r-sig-geo)
- [Le blog r-spatial](https://www.r-spatial.org/)
- [Geocomputation with R](https://geocompr.robinlovelace.net/) de Robin Lovelace, Jakub Nowosad et Jannes Muenchow
- [Spatial Data Science with applications in R](https://r-spatial.org/book/) de Edzer Pebesma et Roger Bivand, en cours de rédaction
- [Spatial Data Science with R](https://rspatial.org/) de Robert J. Hijmans




## Exemple d'analyse sur les données du Québec
```{r}
#| include: false
mf_theme("default")
```


### Import et préparation des données

Nous utilisons le package `sf` pour importer 2 fichiers geojson. 
Il est ensuite possible de changer la projection des couches avec la fonction `st_transform()`.
Nous pouvons aussi créer une couche des régions du Québec en agrégeant les MRC. 

```{r import}
#| message: false
library(sf)
mun_raw <- st_read("geom/munic.geojson", quiet= TRUE)
mrc_raw <- st_read("geom/mrc.geojson", quiet = TRUE)
# Projection NAD83 / Quebec Albers
mun <- st_transform(mun_raw, "EPSG:6623")
mrc <- st_transform(mrc_raw, "EPSG:6623")
# Création d'une couche des régions
reg <- aggregate(mrc[,'MUS_NM_REG'], 
                 by = list(REG = mrc$MUS_NM_REG), 
                 FUN = head, 1)
```




### Première cartographie simple
Sur cette première carte nous allons simplement afficher les couches importées et crées en les superposant. 
Nous utilisons le package `mapsf` qui permet aussi de créer une couche d'étiquettes avec la fonction `mf_label()`. 

```{r carto_quebec_reg}
#| fig-width: 8
#| fig-height: 10.05
library(mapsf)
mf_map(mun, border = "white", add = FALSE)
mf_map(mrc, col = NA, border = "grey70", add = TRUE, lwd = 1)
mf_map(reg, col = NA, border = "black", add = TRUE, lwd = 1.2)
mf_label(reg, var = "MUS_NM_REG", halo = TRUE, overlap = FALSE)
mf_scale(size = 100)
mf_title("Le Québec")
mf_credits(txt = "Ministère des Ressources naturelles et des Forêts, 2023", 
           bg = "#ffffffCC")



```


### Où sont les restaurants dans la ville de Québec? 

Nous voulons savoir dans quelles zones de la ville se trouvent les restaurants. 
Pour connaître la positions des restaurants dans la ville nous allons utiliser la base de donnés cartographique libre OpenstreetMap. 
Pour cela nous utilisons le package `osmdata`. Le package osmdata utilise l’API overpass-turbo pour extraire des données vectorielles de la base de données OpenStreetMap.


Nous devons tout d'abord définir une emprise spatiale à partir de laquelle nous pourrons extraire les informations sur les restaurants.
Après avoir démarré les packages nécessaires, nous allons tout d'abord sélectionner la MRC de Québec dans la couche des MRC. 
```{r}
library(sf)
library(osmdata)
library(mapsf)
library(maptiles)
target <- mrc[mrc$MUS_NM_MRC == "Québec", ]
```

Nous allons ensuite définir une bounding box correspondant à l'emprise de la MRC. Le package osmdata fonctionne avec des objets en WGS84 nous avons donc besoin de reprojeter les données.  
```{r}
# Reprojection en WGS84
targetb <- st_transform(target, "EPSG:4326")
# Initialisation de la requête à envoyer
q <- opq(bbox = st_bbox(targetb))
```


Nous définissons ensuite ce que nous voulons extraire de la base de donnée OSM. Une connaissance de la structuration de la base de données OSM est nécessaire. 
Nous pouvons ensuite envoyer la requête. 
```{r}
#| cache: true
# Extraction des restaurants
req <- add_osm_feature(opq = q, key = 'amenity', value = "restaurant")
res <- osmdata_sf(req)
# Reductcion du resultats 
# (les points composant les polygones sont supprimés)
res <- unique_osmdata(res)

resto_point <- res$osm_points
# extraire les centroides des polygones
resto_poly <- res$osm_polygons
resto_poly_point <- st_centroid(resto_poly)
# identifier les champs en commun
chps <- intersect(names(resto_point), names(resto_poly_point))
# rassembler les 2 objets
resto <- rbind(resto_point[, chps], resto_poly_point[, chps])


target <- st_transform(target, 3857)
resto <- st_transform(resto, 3857)
tiles <- get_tiles(target, provider = "CartoDB.PositronNoLabels",
                   project = FALSE, crop = TRUE, zoom = 11)

mf_theme(mar = c(0,0,0,0), inner = TRUE)
mf_export(tiles, width = ncol(tiles), height = nrow(tiles), filename = "toto.png")
mf_raster(tiles, add = T)
mf_map(target, add = T, col = NA, lwd = 2)
mf_map(resto, add = T, col = "red")
mf_title("Les restaurants à Québec")
dev.off()
```

![](toto.png)


```{r}
library(spatstat)
library(terra)
library(tanaka)

p <- as.ppp(st_coordinates(resto), W = as.owin(st_bbox(target)))
ds <- density.ppp(p, sigma = 500, eps = c(100, 100), positive = TRUE)
rasdens <- rast(ds) * 1000 * 1000
crs(rasdens) <- 'EPSG:3857'
mf_export(tiles, width = ncol(tiles), height = nrow(tiles), filename = "tata.png")
mf_raster(tiles, add = T)
cols <- mf_get_pal(n = 5, palette = "Teal", rev = TRUE)
x <- tanaka_contour(rasdens, breaks = c(1,2,5,10,20,25))
tanaka(x[-1, ], 
       legend.pos = "topright", shift = 65,
       col = cols,
       add = TRUE)
mf_map(target, add = T, col = NA, lwd = 2)
# mf_map(resto, add = T, col = "red", cex = .5)
mf_title("Les restaurants à Québec")
dev.off()
```

![](tata.png)


```{r}
grid <- st_make_grid(target, cellsize = 2000)
grid <- st_sf(id = 1:length(grid), geom = grid)
grid$n <- lengths(st_intersects(grid, resto, sparse = TRUE))

mf_export(tiles, width = ncol(tiles), height = nrow(tiles), filename = "tutu.png")
mf_raster(tiles, add = T)
mf_map(grid[grid$n >0 , ], "n", "choro", 
       breaks = 'geom', nbreak = 6, add = T, 
       alpha= .75, border = NA, pal = "Teal", leg_frame = T)
mf_map(target, add = T, col = NA, lwd = 2)
mf_map(resto, add = T, col = "red", cex = .5)
mf_title("Les restaurants à Québec")
dev.off()
```


![](tutu.png)

