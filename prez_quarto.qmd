---
title: "Créer un notebook avec Quarto: principes, fonctionnalités"
subtitle: "SAGEO, 2023 - Québec, Canada"
author: "Nicolas Lambert, Timothée Giraud,  Matthieu Viry, Ronan Ysebaert"
date: 06/7/2023
date-format: "DD MMM YYYY"
title-slide-attributes:
  data-background-color: black
  data-background-image: fig/SAGEO.png
  data-background-size: cover
  data-background-opacity: "0.5"
format:
  revealjs:
    margin: 0
    code-line-numbers: false
    embed-resources: true
    smaller: true
    scrollable: false
    theme: [simple, custom.scss]
execute:
  echo: true
---

## Evolution des pratiques en SHS (FR)

<br><center>
### Avant 2011 : des "black-boxes" méthodologiques

Logiciels payants, ruptures logicielles dans les chaines de traitements, stockage et partage des données et méthodes non optimisé, univers "clic-bouton".

<img src="fig/chain_1.png" width="800"/></center>

## Evolution des pratiques en SHS (FR)

<br><center>
### 2011 - récemment : vers des chaines de traitement intégrées

Solutions open source, gratuites, qui couvrent l'ensemble de la chaîne de traitement de l'information, univers de programmation.

<img src="fig/chain_2.png" width="800"/>

Une pratique qui tend aujourd'hui à s'universaliser au sein de la communauté (formation, enseignement, recherche).
</center>

## Evolution des pratiques en SHS (FR)

<br><center>
### Depuis peu... : vers l'ouverture à de nouveaux langages ?

Usage de langages de développement variés en fonction des usages désirés (performence de certaines libs, interactivité, ...) et des échanges interdisciplinaires (dataviz).

<center><img src="fig/chain_3.png" width="800"/></center>

Comment passer d'un langage à l'autre dans des mêmes chaînes de traitement ?

## Evolution des pratiques en SHS (FR)

::: columns
::: {.column width="60%"}

### La réplication en question

-   Où sont stockées les données ?
-   Sur quoi reposent ces protocoles méthodologiques ?
-   Comment les documenter ?
-   Comment les restituer / mettre à jour / adapter ?

<center>
![](fig/too_much.png) <small> Qui pour reprendre ces programmes ? </small>
</center>
:::

::: {.column width="40%"}
<center><br><br>
![](fig/dirty_code.png) <small> Qui pour comprendre ce code et ses intentions ? </small>
</center>
:::
:::

## Recherche reproductible

::: columns
::: {.column width="75%"}
Ouverture des protocoles de recherche dans l'objectif de **confirmer** et rendre **répétable** des résultats de recherche.

-   Disponibilité des données et du code, exécutable.
-   Documentation de l'environnement logiciel nécessaire à son exécution.
-   Transparence dans la collecte de données, ses traitements, analyses et sorties graphiques.
-   Réutilisable par d'autres : documentation du code, de ce qu'il produit et dans quel but.
-   Ouvert aux retours, commentaires, suggestions, critiques, révisions.
:::

::: {.column width="25%"}
![](fig/claerbout.jpg) <small> Jon Claerbout (sismologue, Univ. Stanford). Il utilise avec son groupe pour la première fois le terme de "recherche reproductible" lors du congrès de la [*Society of Exploration Geophysics*](http://sep.stanford.edu/oldsep/matt/join/redoc/web/seg92.html) en 1992.

</small>
:::
:::

## Programmation lettrée & notebooks

::: columns
::: {.column width="75%"}
**Paradigme de programmation** ([Knuth, 1984](https://academic.oup.com/comjnl/article/27/2/97/343244)) qui consiste à associer code source (pour les ordinateurs) et documentation (pour les humains).

-   Donner les informations suffisantes pour répliquer l'expérimentation, à la manière d'un essai.
-   Vérifier que les conclusions sont valides.
-   Améliorer les programmes / rendre les mauvaises décisions de conception plus évidentes.
-   Utile pour reprendre les programmes ultérieurement.
-   Transmettre et partager les connaissances sous des formes appropriées (tutoriels, manuels).

> Un gain général en **reproductibilité** de la démarche et en **ouverture** des méthodes scientifiques.
:::

::: {.column width="25%"}
![](fig/Knuth_b.jpg) <small> Donald Knuth (mathématicien, Univ. Stanford). Pose les bases de la programmation lettrée dans un premier environnement de literate programming : le WEB qui combine du Pascal et du TeX, appliqué aux [nombres premiers (1984)](http://literateprogramming.com/knuthweb.pdf).

</small>
:::
:::



## Notebooks : Principes fondamentaux

<center>
Le **Notebook** est une solution opérationnelle et adaptée pour arriver à ces fins

![](fig/notebook_1.png)
<small>Source : Pecout, 2022</small></center>

## Les Notebooks du moment

<center><img src="fig/nouveau_notebook.png" width="800"/>

<small>Source : Pecout, 2022</small></center>

## Quarto ?

<center>
### Un des derniers nés des notebooks (2022)

</center>

::: columns
::: {.column width="40%"}
::: medium
-   Open-source, basé sur Pandoc.
-   Moins dépendant de R : pas d'installation de packages R, comme c'était le cas avec R Markdown.
-   Peut fonctionner ailleurs que dans l'IDE RStudio : pas d'utilisation exclusive de Knitr (Jupyter, Observable également).
-   Permet d'exécuter différents langages de programmation : R, Python, Julia ou JavaScript (interactivité ++).
-   Possibilité de mises en page customisées avancées (templates ++)
:::
:::

::: {.column width="60%"}
![](fig/quarto.png)
:::
:::

## Des sorties multiples

::: panel-tabset
#### Sites Web

::: columns
::: {.column width="20%"}
::: medium
<br><br><br>

<center>

Restituer des analyses reproductibles menées lors d'un projet.

<small> <a href="https://rcarto.gitpages.huma-num.fr/centralite/" target="_blank" role="button">Sortie (site Web)</a> // <a href="https://gitlab.huma-num.fr/rCarto/centralite" target="_blank" role="button">Dépôt GitLab</a> </small>

</center>
:::
:::

::: {.column width="80%"}
![](fig/output_website.png)
:::
:::

#### Présentations

::: columns
::: {.column width="20%"}
::: medium
<br><br><br>

<center>

Générer des présentations interactives (iframe, animations, slides interactifs) avec le format **revealjs**.

<small>**Exemple** : <a href="https://ee-cist.github.io/CAR2_cartodyn/intro/docs/index.html" target="_blank" role="button">Sortie (Présentation)</a> // <a href="https://github.com/EE-CIST/CAR2_cartodyn" target="_blank" role="button">Dépôt GitHub</a> // <a href="https://github.com/EE-CIST/CAR2_cartodyn/blob/main/intro/index.qmd" target="_blank" role="button">Code</a> </small>

</center>
:::
:::

::: {.column width="70%"}
<center><img src="fig/output_prez1.png" width="500"/></center>

<center><img src="fig/output_prez2.png" width="500"/></center>
:::
:::

#### Rapports Interactifs

::: columns
::: {.column width="20%"}
::: medium
<br><br><br>

<center>

Créer des raports interactifs combinant (éventuellement) plusieurs langages de programmation.

<small> <a href="https://rysebaert.github.io/climbing_paris/" target="_blank" role="button">Sortie (Rapport interactif)</a> // <a href="https://github.com/rysebaert/climbing_paris" target="_blank" role="button">Dépôt GitHub</a> // <a href="https://github.com/rysebaert/climbing_paris/blob/main/index.qmd" target="_blank" role="button">Code (Quarto)</a> </small>

</center>
:::
:::

::: {.column width="80%"}
![](fig/output_report.png)
:::
:::

#### Manuels

::: columns
::: {.column width="20%"}
::: medium
<center>

<br><br><br>

Créer des manuels ou des sections pédagogiques collaboratifs au format Book.

<small> <a href="https://py.geocompx.org/" target="_blank" role="button">Sortie (Book)</a> // <a href="https://github.com/geocompx/geocompy" target="_blank" role="button">Dépôt GitHub</a></small>

</center>
:::
:::

::: {.column width="80%"}
![](fig/output_book.png)
:::
:::

#### Publications

::: columns
::: {.column width="40%"}
::: medium
<center>

<br><br><br><br><br>

Soumettre des publications suivant les prérequis (adaptation template LaTeX) de plusieurs revues de référence (Public Library of Science, Elsevier, JSS, etc.)

<small> <a href="https://quarto.org/docs/journals/" target="_blank" role="button">Journal Articles (Quarto doc)</a> </small>

</center>
:::
:::

::: {.column width="60%"}
<center><img src="fig/output_journal.png" width="500"/></center>
:::
:::
:::

## Squelette d'un notebook (Quarto)

<br><br><br><br>

<center>![Source : Pecout, 2022](fig/notebook_2.png)</center>

## Initier un document Quarto dans RStudio

RStudio propose plusieurs modèles pour initier aisément un notebook.

::: columns
::: {.column width="50%"}
![](fig/init_quarto1.png)
:::

::: {.column width="50%"}
![](fig/init_quarto2.png)
:::
:::

## Initier un document Quarto dans RStudio

RStudio propose plusieurs modèles pour initier aisément un notebook.

::: columns
::: {.column width="50%"}
![](fig/init_quarto3.png)
:::

::: {.column width="50%"}
![](fig/init_quarto4.png)
:::
:::


## Paramétrer son document grâce au YAML

::: columns
::: {.column width="50%"}
Le YAML permet de définir :

-   Le format de sortie désiré : **HTML**
:::

::: {.column width="50%"}

``` markdown
---
title: "My document"
author: "Me"
format: html
---
```

:::
:::


## Paramétrer son document grâce au YAML

::: columns
::: {.column width="50%"}
Le YAML permet de définir :

-   Le format de document désiré : HTML, **PDF** (installation d'une distribution TeX requise)
:::

::: {.column width="50%"}

``` markdown
---
title: "My pdf document"
author: "Me"
format: pdf
---
```

:::
:::


## Paramétrer son document grâce au YAML

::: columns
::: {.column width="50%"}
Le YAML permet de définir :

-   Le format de document désiré : HTML, PDF (installation d'une distribution TeX requise), **docx** (requiert une installation de Microsof tOffice ou Libre/Open Office). 
:::

::: {.column width="50%"}

``` markdown
---
title: "My docx document"
author: "Me"
format: docx
---
```

:::
:::


## Paramétrer son document grâce au YAML

::: columns
::: {.column width="50%"}
Le YAML permet de définir :

-   Le format de document désiré : HTML, PDF (installation d'une distribution TeX requise), .docx.

-   Le type de sortie souhaité : Document, **Présentation** (revealjs / beamer, PowerPoint)
:::

::: {.column width="50%"}

``` markdown
---
title: "My presentation"
author: "Me"
format: revealjs / beamer / pptx
---
```
:::
:::


## Paramétrer son document grâce au YAML

<center>Ces modèles sont hautement paramétrables</center>

::: columns

::: {.column width="50%"}

::: medium

-   choisir un thème
-   table des matières
-   numérotation des parties du document
-   choix des couleurs
-   style de la typo : police, couleurs, taille.  
-   affichage des blocs de code
-   dimensionnement des figures et tables
-   gestion des urls
-   ajout d'une bibliographie (BibTeX)
-   affichage des notes de bas de page
-   métadonnées associées au document
-   ajouter une feuille de style css
-   ...

::: 

:::

::: {.column width="50%"}
[Exemple](https://rysebaert.github.io/granular_qmd_template/) d'un modèle suivant les consignes éditorales d'un projet européen...
![](fig/output_doc_templated.png)
:::

:::


---


## Paramétrer son document grâce au YAML

<center>Ces modèles sont hautement paramétrables</center>

::: columns

::: {.column width="50%"}

::: medium

-   choisir un thème
-   table des matières
-   numérotation des parties du document
-   choix des couleurs
-   style de la typo : police, couleurs, taille.  
-   affichage des blocs de code
-   dimensionnement des figures et tables
-   gestion des urls
-   ajout d'une bibliographie (BibTeX)
-   affichage des notes de bas de page
-   métadonnées associées au document
-   ajouter une feuille de style css
-   ...

::: 

:::

::: {.column width="50%"}
... Et son YAML associé :
``` markdown
---
title: "OpenStreetMap data and associated routing engine to produce novel data on rural areas in Europe"
subtitle: "Review data and methods" 
author:
  - name: "Ronan Ysebaert, Marianne Guérois\n, Timothée Giraud, Nicolas Lambert, Matthieu Viry" 
    affiliation: UAR RIATE (CNRS,  Université Paris Cité) 
    affiliation-url: https://riate.cnrs.fr/
date: "`r Sys.Date()`"
description: "This review of the literature and data availability aims at providing an overview of possible solutions and limitations for creating accessibility indicators at European context. Whatever the solution retained, computing accessibility indicators requires relevant origins / destination pairs and routing engines for computing travel-time indicators. It is afterward possible to propose a large set of indicators derived from these measures. The first part of the document presents at European scale the policy context and the main initiatives developed so far for proposing harmonized indicators on accessibility. The second one reminds the main issues to be considered when calculating accessibility indicators (origin-destination pairs, routing engines, accessibility indicators computation). The third section makes an overview of existing databases and possibilities that could be considered in a European context for the selection of origins / destinations pairs. The fourth part highlights existing solutions for routing engines according to several transportation modes (road, cycle, transport-transit). Finally, the last section discusses on possibilities offered in term of indicator creation when the travel time matrix is calculated with a case-study on hospitals in France. This case-study could be extended in a cross-border context to test this framework within GRANULAR activities. At the end, this report aims at providing a general research framework on the activities that will be held on task 3.3.1 of the GRANULAR project: Crowd-sources data based on OpenStreetMap."
title-block-banner: "#27445C"
bibliography: bib.bib
format:
  html:
    theme: sandstone
    embed-resources: true
    smooth-scroll: true
    fontsize: 0.9em
    code-tools: true
    code-fold: true
    toc: true
    toc-title: Summary
    toc-depth: 2
    toc-location: left
    css: "styles.css"
    linkcolor: "#d52420"
---
```
:::

:::

Les possibilités offertes sont présentées dans la documentation [Quarto](https://quarto.org/docs/reference/formats/html.html)


## Décrire simplement son cheminement en markdown

::: columns

::: {.column width="50%"}

- Permet de gérer les blocs de textes entre les blocs de code dans les notebooks Quarto. 

- Un langage de balisage léger basé sur une syntaxe simple largement utilisé dans les blogs, forums et outils collaboratifs. 

- Permet de gérer le formatage du texte, des en-têtes, importer simplement des images ou des URL, gérer des énumérations, des tables, etc.

:::

::: {.column width="50%"}

+-----------------------------------+-------------------------------+
| Markdown Syntax                   | Output                        |
+===================================+===============================+
|      ### Titre de niveau 3        | ### Titre de niveau 3         |
+-----------------------------------+-------------------------------+
|     *italics* and **bold**        | *italics* and **bold**        |
+-----------------------------------+-------------------------------+
|     superscript^2^ / subscript~2~ | superscript^2^ / subscript~2~ |
+-----------------------------------+-------------------------------+
|     ~~strikethrough~~             | ~~strikethrough~~             |
+-----------------------------------+-------------------------------+
|     `verbatim code`               | `verbatim code`               |
+-----------------------------------+-------------------------------+
|     * unordered list              | -   unordered list            |
|         + sub-item 1              |                               |
|         + sub-item 2              |     -   sub-item 1            |
|             - sub-sub-item 1      |                               |
|                                   |     -   sub-item 2            |
|                                   |                               |
|                                   |         -   sub-sub-item 1    |
+-----------------------------------+-------------------------------+
|      [named hyperlinks](url)      | [named yperlinks](url)        |
+-----------------------------------+-------------------------------+

:::

:::

Se reporter au [Markdown Guide](https://www.markdownguide.org/basic-syntax/) ou à la [synthèse](https://quarto.org/docs/authoring/markdown-basics.html) proposée par Quarto pour en savoir plus. 


## Optimiser sa mise en page avec des classes préformatées

Ceci

``` markdown
::: columns

::: {.column width="50%"}
::: {.callout-tip}
## 5 types de callouts dispnibles
`note`, `warning`, `important`, `tip`, and `caution`.
:::
::: 

::: {.column width="50%"}
![](fig/callout.png)
:::

:::
```

. . .

Rend cela

::: columns

::: {.column width="50%"}
::: {.callout-tip}
## 5 types de callouts dispnibles
`note`, `warning`, `important`, `tip`, and `caution`.
:::
::: 

::: {.column width="50%"}
![](fig/callout.png)
:::

:::


## Paramétrer ses blocs de code grâce aux chunks

Le code est à placer dans des ***chunks*** (tronçons), délimités par des triples ***backticks*** (Code > Insert Chunk dans R Studio).

Un même document Quarto peut combiner plusieurs langages de programmation : 

::: medium

*Voici un chunk en Julia pour créer un joli cercle.* 

````

```{{julia}}
radius = 10
using Markdown
Markdown.parse("""
The radius of the circle is $radius.
""")
```

````

*Puis un graphique créé avec la librairie python matplotlib.* 

````

```{{python}}
import matplotlib.pyplot as plt
plt.plot([1,2,3,4])
plt.show()
```

````

::: 

## Paramétrer ses blocs de code grâce aux chunks

Le code est à placer dans des ***chunks*** (tronçons), délimités par des triples ***backticks*** (Code > Insert Chunk dans R Studio).

Un même document Quarto peut combiner plusieurs langages de programmation : 

::: medium

*Un graphique avec la librarie ggplot de R peut être ?*

````
```{{r}}
library(ggplot2)
ggplot(airquality, aes(Temp, Ozone)) + 
  geom_point() + 
  geom_smooth(method = "loess", se = FALSE)
```

````
::: 

## Paramétrer ses blocs de code grâce aux chunks

Le code est à placer dans des ***chunks*** (tronçons), délimités par des triples ***backticks*** (Code > Insert Chunk dans R Studio).

Un même document Quarto peut combiner plusieurs langages de programmation : 

::: medium

*Soyons fous ! Initions un joli graphique interactif en Observable JavaScript !*

````
```{{ojs}}
pdata = FileAttachment("palmer-penguins.csv").csv({typed: true})

Plot.plot({
  facet: {
    data: pdata,
    x: "sex",
    y: "species",
    marginRight: 80
  },
  marks: [
    Plot.frame(),
    Plot.rectY(pdata, 
      Plot.binX(
        {y: "count"}, 
        {x: "body_mass_g", thresholds: 20, fill: "species"}
      )
    ),
    Plot.tickX(pdata, 
      Plot.groupZ(
        {x: "median"}, 
        {x: "body_mass_g",
         z: d => d.sex + d.species,
         stroke: "#333",
         strokeWidth: 2
        }
      )
    )
  ]
})
```

````

:::


## Paramétrer ses blocs de code grâce aux chunks

En initiant le chunk par un *hash pipe* `#|` on peut paramétrer son exécution / affichage. Les arguments les plus usuels sont :

- `label: toto` : nommer le chunk
- `eval: true/false` : le bloc de code est joué ou non.
- `echo: true/false` : le bloc de code s'affiche ou non dans le document de sortie. 
- `cache: true/false` : les résultats sont mis en cache et ne sont pas rejoués tant que le bloc de code reste inchangé. 
- `warning: true/false` : affiche les messages d'alerte ou non. 
- `fig-height: 4` / `fig-width: 6` : hauteur / largeur du plot de sortie, en pouces. 
- `dpi: 150`: densité de pixels par pouce. 


## Paramétrer ses blocs de code grâce aux chunks

A noter / quelques conseils :

- Penser à générer (`render`) le document fréquemment pour veiller à la cohérence / bonne exécution de vos blocs de code.
- Pour vous comme pour les autres, évitez les blocs de code trop volumineux ou longs. 
- Les paramètres des chunks peuvent aussi être spécifiés dans le YAML (setup chunk).
- L'usage de Knitr rend disponible encore [davantage d'options](https://quarto.org/docs/reference/cells/cells-knitr.html)

## Paramétrer ses blocs de code grâce aux chunks / Exemples

::: columns

::: {.column width="50%"}

Ceci dans le .qmd :

````

```{{r}}
plot(1:10)
```

````

::: 

::: {.column width="50%"}

Rendra cela dans le fichier de sortie :

```{r}
plot(1:10)
```

::: 

::: 

## Paramétrer ses blocs de code grâce aux chunks / Exemples

::: columns

::: {.column width="50%"}

Ceci dans le .qmd :

````

```{{r}}
#| eval: false
#| echo: false
plot(1:10)
```

````

::: 

::: {.column width="50%"}

Rendra cela dans le fichier de sortie :

```{r}
#| eval: false
#| echo: false
plot(1:10)
```

Rien, et c'est bien normal :) 

::: 

::: 


## Paramétrer ses blocs de code grâce aux chunks / Exemples

::: columns

::: {.column width="50%"}

Ceci dans le .qmd :

````

```{{r}}
#| echo: false
plot(1:10)
```

````

::: 

::: {.column width="50%"}

Rendra cela dans le fichier de sortie :

```{r}
#| echo: false
plot(1:10)
```


::: 

::: 


## Paramétrer ses blocs de code grâce aux chunks / Exemples

::: columns

::: {.column width="50%"}

Ceci dans le .qmd :

````

```{{r}}
#| fig-height: 6
#| fig-width: 4
#| fig-align: center
#| fig-cap: Un beau graphique ! 
#| code-fold: true
plot(1:10)
```

````

::: 

::: {.column width="50%"}

Rendra cela dans le fichier de sortie :

```{r}
#| fig-height: 6
#| fig-width: 4
#| fig-align: center
#| fig-cap: Un beau graphique ! 
#| code-fold: true
plot(1:10)
```


::: 

::: 





## Ressources pour aller plus loin

**Supports utiles** 

- [Comprehensive guide to using Quarto](https://quarto.org/docs/guide/) 
- Mock T., 2022, [Get Started with Quarto](https://rstudio-conf-2022.github.io/get-started-quarto/), RStudio Conference : Intro to Quarto, Authoring Quarto, Code and Editors, Static Documents, Presentations, Websites & Books, Plot & Tables, Advanced Quarto.

**Enjeux de la reproductibilité** 

- Brundson C., Comber A., 2020, [Opening practice: supporting reproducibility and critical spatial data science](https://link.springer.com/article/10.1007/s10109-020-00334-2), Journal of Geographical Systems 23. 
- Desquilbet L., et al., 2019, [Vers une recherche reproductible. Faire évoluer ses pratiques](https://rr-france.github.io/bookrr/).
- Nüst D., Pebesma E., 2021, [Practical Reproducibility in Geography and Geosciences](https://eartharxiv.org/repository/view/3216/), Annals of the Americal Association of Geographes, vol 111, 2021, Issue 5.

## A vous de jouer !

::: {.callout-caution}
### \[To do\] : Initier un document Quarto

-   Créez un document Quarto à partir des modèles proposés par RStudio. 
-   Jouez avec les métadonnées pour paramétrer le document (nom de l'auteur, ajout table des matières, etc.)
-   Exportez au format html le document que vous venez de produire (render). 
:::


::: {.callout-tip}

### Ctrl + espace pour activer l'autocomplétion et envisager les possibilités
![](fig/help_quarto_yaml.png)
:::

